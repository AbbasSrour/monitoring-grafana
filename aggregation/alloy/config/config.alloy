logging {
	level = "debug"
}

prometheus.remote_write "prometheus_db" {
	endpoint {
		name    = "prometheus"
		url     = "http://prometheus:9090/api/v1/write"
		queue_config { }
		metadata_config { }
	}
}

prometheus.scrape "backend" {
	job_name        = "backend"
    scrape_interval = "2m0s"
    scrape_timeout  = "5s"
    enable_http2    = false
	targets = [{
        __address__ = "host.docker.internal:8000",
	}]
	forward_to      = [prometheus.remote_write.prometheus_db.receiver]
}
prometheus.scrape "prometheus" {
    job_name        = "prometheus"
    scrape_interval = "15s"
    scrape_timeout  = "5s"
	targets = [{
        __address__ = "prometheus:9090",
	}]
    forward_to = [prometheus.remote_write.prometheus_db.receiver]
}
prometheus.scrape "nodeexporter" {
    job_name        = "nodeexporter"
    scrape_interval = "15s"
    scrape_timeout  = "5s"
    targets = [{
        __address__ = "nodeexporter:9100",
    }]
    forward_to      = [prometheus.remote_write.prometheus_db.receiver]
}
prometheus.scrape "cadvisor" {
    job_name        = "cadvisor"
    scrape_interval = "15s"
    scrape_timeout  = "5s"
    targets = [{
        __address__ = "cadvisor:8080",
    }]
    forward_to      = [prometheus.remote_write.prometheus_db.receiver]
}
prometheus.scrape "nginx" {
    job_name        = "nginx"
    scrape_interval = "15s"
    scrape_timeout  = "5s"
    targets = [{
        __address__ = "nginxexporter:9113",
    }]
    forward_to      = [prometheus.remote_write.prometheus_db.receiver]
}



loki.write "loki_db" {
	endpoint {
		url = "http://loki:3100/loki/api/v1/push"
	}
	external_labels = {}
}

local.file_match "containers" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/var/lib/docker/containers/*/*log",
		job         = "containerlogs",
	}]
}
loki.source.file "containers" {
	legacy_positions_file = "/tmp/positions.yaml"
	targets               = local.file_match.containers.targets
	forward_to            = [loki.process.containers.receiver]
}
loki.process "containers" {
	stage.json {
		expressions = {
			attrs  = "",
			output = "log",
			stream = "stream",
		}
	}

	stage.json {
		expressions = {
			tag = "",
		}
		source = "attrs"
	}

	stage.regex {
		expression = "(?P<container_name>(?:[^|]*[^|]))"
		source     = "tag"
	}

	stage.timestamp {
		source = "time"
		format = "RFC3339Nano"
	}

	stage.labels {
		values = {
			container_name = null,
			stream         = null,
			tag            = null,
		}
	}

	stage.output {
		source = "output"
	}

	forward_to = [loki.write.loki_db.receiver]
}
